package parquetgen

import (
	"bytes"
	"go/format"
	"log"
	"os"
	"reflect"
	"text/template"
)

// Template for the generated Parquet struct
const parquetTemplate = `
// Code generated by codegen.go; DO NOT EDIT.
package parquetmodels

type {{ .StructName }}Parquet struct {
{{- range .Fields }}
    {{ .FieldName }} {{ .ParquetField }} ` + "`parquet:\"name={{ .FieldName }}, type={{ .ParquetType }}\"`" + `
{{- end }}
}
`

// FieldMapping represents the field mapping for Parquet struct generation
type FieldMapping struct {
	FieldName    string
	ParquetField string
	ParquetType  string
}

// Mapping Go types to Parquet types
var typeMapping = map[string]string{
	"string":    "BYTE_ARRAY, convertedtype=UTF8",
	"int64":     "INT64",
	"float64":   "DOUBLE",
	"bool":      "BOOLEAN",
	"time.Time": "INT64, logicaltype=TIMESTAMP_MILLIS",
}

// GenerateParquetStruct generates the Parquet struct based on a GORM model
func GenerateParquetStruct(model interface{}, structName string) string {
	modelType := reflect.TypeOf(model)
	var fieldMappings []FieldMapping

	// Iterate over the fields in the GORM model
	for i := 0; i < modelType.NumField(); i++ {
		field := modelType.Field(i)
		fieldType := field.Type

		// Check if the field is a pointer
		isPointer := fieldType.Kind() == reflect.Ptr
		if isPointer {
			fieldType = fieldType.Elem() // Get the underlying type of the pointer
		}

		goType := fieldType.String()

		// Map Go type to Parquet type
		parquetType, ok := typeMapping[goType]
		if !ok {
			log.Fatalf("Unsupported Go type: %s", goType)
		}

		// Build the Parquet field mapping
		fieldMappings = append(fieldMappings, FieldMapping{
			FieldName:    field.Name,
			ParquetField: field.Type.String(),
			ParquetType:  parquetType,
		})
	}

	// Render the template
	tmpl, err := template.New("parquet").Parse(parquetTemplate)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	var buffer bytes.Buffer
	if err := tmpl.Execute(&buffer, struct {
		StructName string
		Fields     []FieldMapping
	}{
		StructName: structName,
		Fields:     fieldMappings,
	}); err != nil {
		log.Fatalf("Failed to generate code: %v", err)
	}

	// Format the generated code
	formattedCode, err := format.Source(buffer.Bytes())
	if err != nil {
		log.Fatalf("Failed to format code: %v", err)
	}

	return string(formattedCode)
}

// WriteToFile writes the generated Parquet struct to the specified Go file
func WriteToFile(filename, content string) {
	file, err := os.Create(filename)
	if err != nil {
		log.Fatalf("Failed to create file: %v", err)
	}
	defer file.Close()

	_, err = file.WriteString(content)
	if err != nil {
		log.Fatalf("Failed to write to file: %v", err)
	}
}
